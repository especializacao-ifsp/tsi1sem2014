== 1.	EXECUÇÃO E CONTROLE ==

Após a realização do planejamento do projeto, iniciou-se a fase de execução do projeto, onde a equipe foi dividida em vários grupos, onde cada grupo tinha a responsabilidade de desenvolver uma parte especifica do aplicativo web e local. Foi definida a arquitetura que seria utilizada, como pode ser visto na imagem abaixo:
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/arquiteturapronta.png </p>
<p align=center>Figura 1 - Arquitetura do Projeto </p>

Na figura da arquitetura do projeto podemos observar o desenvolvimento de um projeto mobile na qual o bando de dados é responsável pela armazenagem dos dados do usuário e ações do sistema. Os serviços que o sistema pode realizar estão disponíveis na plataforma móvel. Nas próximas seções poderá ser visualizada a organização do projeto com maiores detalhes.

<br>
===1.1.	APLICATIVO WEB (Cliente)===
Para criar um projeto estruturado, foi utilizado os conceitos MVC, dividindo em camadas, que são responsáveis por determinadas ações. Na Figura abaixo podemos observar que foram criados pacotes para conter os controllers, um para as classes de DAO, um pacote para as classes do modelo, um pacote para guardar todas as classes que foram utilizados para testes, um pacote para adicionar classes uteis para todo o projeto e por fim um pacote para adicionar as classes de validação.

<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/figura2b.png </p>
<p align=center>Figura 2 - Estrutura do Projeto </p>

<br><br>
Abaixo contém a parte visual do projeto, onde estão contidos os arquivos de javascript, de css e as views que foram criadas.

<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/Figura%203%20%E2%80%93%20Estrutura%20de%20Layout%20do%20Projeto.png </p>
<p align=center>Figura 3 – Estrutura de Layout do Projeto </p>

<br><br>
Na figura abaixo é possível observar as classes que foram criadas no pacote 

<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/Figura%204%20%E2%80%93%20Classes%20do%20pacote.png </p>
<p align=center>Figura 4 – Classes do pacote </p>

<br><br>
Observa-se na figura abaixo as classes criadas no pacote DAO, responsável por realizar o acesso e todas as interações ao banco de dados. 
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/figura4c.png </p>
<p align=center>Figura 5 – Classes do Pacote DAO </p>

<br><br>
É possível verificar na imagem abaixo as classes que foram criadas no pacote modelo.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/figura4b.png </p>
<p align=center>Figura 6 – Classes do pacote modelo </p>

<br><br>
Na imagem abaixo pode-se observar as classes que foram criadas no pacote rest (Web Service)
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/Figura%206%20%E2%80%93%20Classes%20do%20pacote%20rest.png </p>
<p align=center>Figura 7 – Classes do pacote rest </p>

<br><br>
Na imagem abaixo é possível observar as classes que foram criadas no pacote útil (conexão com Web Service)
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/Figura%208%20%E2%80%93%20Classes%20do%20pacote%20%C3%BAtil.png </p>
<p align=center>Figura 8 – Classes do pacote útil </p>

<br><br>
Na figura abaixo é possível observar as classes que foram criadas no pacote testes, onde os desenvolvedores criaram para testar os métodos de DAO.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 9 – Classes do Pacote de Teste </p>

<br><br>
Abaixo é possível observar as classes que foram criadas no pacote útil, que contém a classe URLCatcher  e o pacote validation, onde possui uma classe para realizar a validação.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 10 – Demais pacotes </p>

<br><br>
Na classe URLCatcher foram definidas todas as URLs das páginas e controllers utilizados, como mostra um trecho retirado da classe a baixo:
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 11 – URLs das páginas de controllers </p>

<br><br>
==== 1.1.2 TESTES DE QUALIDADE ====
Segue abaixo os resultados dos testes de qualidade executados no sistema web.
<p align=center>Tabela 1 - Testes de Qualidade </p>
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/tabela-exemplo.png </p>

<br><br>
=== 1.2 WEB SERVICE (Servidor) ===
<br>
Para criar um projeto estruturado, dividindo em camadas, que são responsáveis por determinadas ações. Na Figura abaixo podemos observar que foram criados pacotes para conter as classes de DAO, um pacote para as classes do modelo e por fim um pacote para adicionar as classes do resources.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 12 – Projeto do WebService </p>

<br><br>
As classes contidas no pacote resources preparam as informações vindas do banco para fornecer para a aplicação Android. Abaixo podem ser observadas as classes criadas para o pacote Dao.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 13 – Classes do Pacote Dao </p>

<br><br>
Abaixo pode ser observado as classes criadas para os pacotes Exception
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 14 – Classes do Pacote Exception </p>

<br><br>
Abaixo pode ser observado as classes criadas para os pacotes model
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 15 – Classes dos Pacotes Model </p>

<br><br>
Abaixo pode ser observado as classes criadas para os pacotes Resources
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 16 – Classes dos Pacotes Resources </p>

=== 1.3  APLICATIVO ANDROID  ===
Com o objetivo de criar um projeto estruturado, o sistema foi dividido em camadas, onde cada uma é responsável por determinadas ações. Na Figura abaixo podemos observar que foram criados pacotes para conter as classes de DAO, pacote com as classes para acesso ao webservice, um pacote para as classes do model e por fim um pacote para adicionar as classes do servidor.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 17 – Estrutura projeto Android </p>

<br><br>
Nas classes do pacote survivor prepara as informações vindas do webservice e fornece elas as telas do aplicativo. E realiza também o processo inverso, pegando os dados da tela e enviando para as classes de conexão com o webservice, através das classes do pacote DAO.
O pacote DAO contem as classes que atuam como intermediarias para realizar o tratamento dos dados que são recebidos do webservice. A estrutura pode ser visto abaixo:
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 18 – Pacotes DAO </p>

<br><br>
Na figura abaixo é possível observar as classes que foram criadas no pacote model e pacote ws. O pacote ws contem as  classes que consomem os serviços do webservice.
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 19 – Pacote Modelo </p>

<br><br>
Abaixo podemos observar as telas do Android dentro da pasta res/layout/ 
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/imagem-exemplo1.png </p>
<p align=center>Figura 20 – Telas do Aplicativo Android </p>

== 2. IMPLANTAÇÃO ==
Com o objetivo de orientar as pessoas que desejarem implantar o sistema no Instituto Federal, foi elaborado um planejamento de sua implantação, que pode ser visto nas próximas seções.

=== 2.1. PLANEJAMENTO DA IMPLANTAÇÃO ===
O sistema SDN foi concebido para ser executado pelos seguintes softwares:
<br>Apache Tomcat Versão 7.0.34.0: O Apache Tomcat é um servidor web Java de aplicações JEE, mais especificamente, um contêiner de servlets. Um tutorial de instalação para esta versão do Tomcat pode ser encontrado em:
<br><br>Linux: http://desenvolvedorinteroperavel.wordpress.com/2012/03/18/instalacao-do-tomcat-7-e-java-jdk-1-7-no-centos-fedora-e-red-hat/ 
<br><br>Windows: http://www.oficinadanet.com.br/artigo/992/instalacao_e_configuracao_do_tomcat 
<br>MySQL Versão 5.1.34-community: O MySQL é um sistema de gerenciamento de banco de dados (SGBD), que utiliza a linguagem SQL (Linguagem de Consulta Estruturada, do inglês Structured Query Language) como interface. Um tutorial de instalação para esta versão doMysql pode ser encontrado em:
<br><br>Linux: http://www.vivaolinux.com.br/dica/Instalando-MySQL-5.1-no-Debian-5-x86_64-pelo-aptget 
Windows: http://www.sistemabasico.com.br/2011/06/30/instalando-o-mysql-5-5-8-no-windows-7/ 
<br><br>O arquivo com a implementação da Base de dados e alguns dados pré-inseridos é fornecido por um arquivo sem extensão com nome banco_sdn. Para restaurar a base dados através do arquivo você deve possuir o aplicativo Mysql Administrator, um software do pacote de instalação MySQL GUI Tools Bundle disponível em: http://dev.mysql.com/downloads.
<br><br>Ao executar o programa a tela da Figura 22 será exibida:
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/figura22-acessomysql.png </p>
<p align=center>Figura 22 – Acesso MySQL </p>

Após  preencher os dados relativos a conexão com o servidor de banco de dados Mysql a seguinte janela será exibida:

<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/banco.png </p>
<p align=center>Figura 23 – Acesso MySQL </p>

Com a Base de Dados restaurada, o próximo passo é implantar o arquivo sdn.WAR que contem os serviços, dentro de um servidor Tomcat pré-configurado. Tutoriais para a instalação e confiração do Tomcat em diversas plataformas pode ser obtido em: http://www.mhavila.com.br/topicos/java/tomcat.html 
Abra um navegador de sua preferência e se conecte a http://IP_DO_SERVIDOR_TOMCAT:8080/manager/html. E insira o usuário e senha. Se você não sabe qual é o usuário e a senha do servidor procure no arquivo CATALINA_HOME/conf/tomcat-users.xml e veja e cheque a configuração. 
Role a página até seção chamada "Deploy directory or WAR file located on server". Insira o nome do contexto precedido por “/” (ex /sdn) no campo de Caminho de contexto. 
Localize o arquivo .WAR do SDN chamado sdn.WAR e entre com o caminho completo do arquivo (Ex., /camnho/para/sdn.WAR) no campo Directory URL.

<br>Esta seção deve se parecer com a exibida na Figura 24:
<p align=center>http://tsi1sem2014.googlecode.com/svn/wiki/images/execucaoecontrole/deploy.png </p>
<p align=center>Figura 24- Campo de seleção do arquivo .WAR </p>
<br>Clique em Deploy. A página era recarregar. No topo da página, veja se aparece a mensagem OK - Deployed application at context path /camnho/para/sdn.WAR"
Na seção Applications cheque se exista uma linha representando a aplicação sdn. Pronto, a aplicação já pode ser acessada.